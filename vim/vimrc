colorscheme iceberg

syntax on

" ================
" for coc setting
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
highlight CocErrorSign ctermfg=15 ctermbg=160
highlight CocWarningSign ctermfg=0 ctermbg=172
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Apply AutoFix to problem on the current line.
nmap <leader>cf  <Plug>(coc-fix-current)

nnoremap <leader>r :<C-u>CocRestart<CR>

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" coc setting end
" ================

" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

set number
set expandtab
set tabstop=2
set shiftwidth=2
set ignorecase
set smartcase
set wrapscan
set hlsearch
set showmatch matchtime=1
set guioptions+=a
set smartindent
set title
set clipboard=unnamed,autoselect
set backspace=indent,eol,start " for using delete on newer vim
" set cursorline カーソル移動遅い原因
set wildmode=list:longest
set whichwrap=b,s,h,l,<,>,[,]

set directory=/tmp

inoremap <silent> jj <ESC>

augroup source-vimrc
  autocmd!
  autocmd BufWritePost *vimrc source $MYVIMRC | set foldmethod=marker
  " autocmd BufWritePost *gvimrc if has('gui_running') source $MYGVIMRC 必要なさそう
augroup END

" //////////////
" plugin
" //////////////
call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'nathanaelkane/vim-indent-guides'

" " Comment out
Plug 'tomtom/tcomment_vim'
"
" Open github
Plug 'tyru/open-browser.vim'
Plug 'tyru/open-browser-github.vim'

" jsonnet hightlighting
Plug 'google/vim-jsonnet'

" rspec syntax highlighting
Plug 'keith/rspec.vim'

" terraform syntax
Plug 'hashivim/vim-terraform'

" php syntax highlighting
Plug 'StanAngeloff/php.vim'

" HTML, CSS, jS
Plug 'hail2u/vim-css3-syntax'

" ruby slim syntax
Plug 'slim-template/vim-slim'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'jparise/vim-graphql'

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" for emotion
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }

" markdown preview
Plug 'skanehira/preview-markdown.vim'

call plug#end()

" //////////////
" custom key map
" //////////////

let mapleader = "\<Space>"
let g:terraform_align=1
" let g:terraform_fold_sections=1

nnoremap <C-v> :<C-u>vsplit<CR>
nnoremap <Leader>p :<C-u>Files<CR>
nnoremap <Leader>o :<C-u>Ex<CR>
nnoremap <Leader>i :<C-u>Ag<CR>
nnoremap <Leader>u :<C-u>OpenGithubFile<CR>
vmap <Leader>u :<C-u>'<,'>OpenGithubFile<CR>
nnoremap <Leader>s :<C-u>w<CR>
nnoremap <Leader>q :<C-u>q<CR>
noremap <S-l> $
noremap <S-h> ^
nnoremap x "_x

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level=1
let g:indent_guides_guide_size = 2
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=darkgray
hi IndentGuidesEven ctermbg=black


" preview markdown
let g:preview_markdown_parser='glow'
let g:preview_markdown_vertical	= 1

" use indent for pu
autocmd BufRead,BufNewFile *.pu set expandtab!

" php, html
" $VIMRUNTIME/syntax/php.vim
let g:php_baselib       = 1
let g:php_htmlInStrings = 1
let g:php_noShortTags   = 1
let g:php_sql_query     = 1
let php_parent_error_close  = 1
highlight Pmenu ctermbg=4
highlight PmenuSel ctermbg=1
highlight PMenuSbar ctermbg=4

filetype plugin on
